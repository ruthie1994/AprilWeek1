////////////////////////////////////////////////////////////////////////////////////////////////
// File :			DTSLab7.cpp
// Author :			Rodney Stoeffler
// Created :		06.03.2008
// Last Modified :	01.23.2019
// Purpose :		Driver Program for the Graph class.
// Notes :			Property of Full Sail University, Data Structures Course.
//					DON'T CHANGE THIS FILE. change your code if something is not working
//					Program Output should match the Lab Document
////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
// LEAK DETECTION
////////////////////////////////////////////////////////////////////////////////////////////////
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>

////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <string>
using namespace std;
#include "Graph.h"			// Include for provided Graph header.

////////////////////////////////////////////////////////////////////////////////////////////////
// REDUNDANT INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////
#include "Graph.h"			// Include for provided Graph header.

////////////////////////////////////////////////////////////////////////////////////////////////
// Function :	printLinkedRepresentation
// Parameters : g - the graph to print
// Return :		void
////////////////////////////////////////////////////////////////////////////////////////////////
template <typename Type>
void printLinkedRepresentation(Graph<Type> &g)
{
	for(unsigned int i = 0; i < g.size (); ++i)
	{
		cout << "Vertex " << i << " (" << g[i].element << ") : ";
		SLLIter< Graph<Type>::Edge > j (g[i].edges);
		for (j.begin (); !j.end (); ++j)
			cout << j.current ().toVertex << "  ";
		cout << '\n';
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////
// Function :	maing
// Parameters : argc - the number of command line arguments
//				argv - the array of command line arguments
// Return :		int - 0 for success
////////////////////////////////////////////////////////////////////////////////////////////////
int main (int argc, char ** argv)
{
////////////////////////////////////////////////////////////////////////////////////////////////
// LEAK DETECTION
////////////////////////////////////////////////////////////////////////////////////////////////
	_CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);

	// this function call will set a breakpoint at the location of a leaked block
	// set the parameter to the identifier for a leaked block
//	_CrtSetBreakAlloc();

////////////////////////////////////////////////////////////////////////////////////////////////
// LAB 7
////////////////////////////////////////////////////////////////////////////////////////////////
	cout << "**********************************************************************\n";
	cout << "**                              LAB 7:                              **\n";
	cout << "**********************************************************************\n\n";

	////////////////////////////////////////////////////////////////////////////////////////////
	// Declarations
	////////////////////////////////////////////////////////////////////////////////////////////
	Graph<char> g;
	Graph<char> g2;
	Graph<string> stringGraph;


	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 1 - Constructor, addVertex and addEdge function tests
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "*** TEST 1 ***\n";
	g.addVertex('h');
	g.addVertex('a');
	g.addVertex('i');
	g.addVertex('r');
	g[0].addEdge(1);
	g[1].addEdge(0);
	g[1].addEdge(2);
	g[2].addEdge(1);
	g[2].addEdge(3);
	g[3].addEdge(2);

	printLinkedRepresentation(g);
	cout << "\n\n";

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 2 - printBreadthFirst function test
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "*** TEST 2 ***\n";

	for(unsigned int i = 0; i < g.size(); ++i)
	{
		cout << "Breadth First Graph Traversal" << "\n";
		g.printBreadthFirst(i);
		cout << "\n";
	}

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 3 - Copy Constructor/Assignment Operator test
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "\n*** TEST 3 ***\n";
	g2 = g;
	printLinkedRepresentation(g2);
	g.addVertex('s');
	g[4].addEdge(3);
	g[3].addEdge(4);
	Graph<char> g3(g2);
	cout << '\n';
	printLinkedRepresentation(g3);

	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 4 - String test
	////////////////////////////////////////////////////////////////////////////////////////////
	cout << "\n\n*** TEST 4 ***\n";
	stringGraph.addVertex("This");
	stringGraph.addVertex("is");
	stringGraph.addVertex("only");
	stringGraph.addVertex("a");
	stringGraph.addVertex("test");
	stringGraph[0].addEdge(1);
	stringGraph[1].addEdge(2);
	stringGraph[1].addEdge(0);
	stringGraph[2].addEdge(1);
	stringGraph[2].addEdge(3);
	stringGraph[3].addEdge(2);
	stringGraph[3].addEdge(4);
	stringGraph[4].addEdge(3);
	printLinkedRepresentation(stringGraph);
	stringGraph.printBreadthFirst(1);


	////////////////////////////////////////////////////////////////////////////////////////////
	// TEST 5 - test clear function
	////////////////////////////////////////////////////////////////////////////////////////////
	g.clear();
	printLinkedRepresentation(g);
	cout << "\n\n";

	////////////////////////////////////////////////////////////////////////////////////////////
	// Complete
	////////////////////////////////////////////////////////////////////////////////////////////
	return 0;
}